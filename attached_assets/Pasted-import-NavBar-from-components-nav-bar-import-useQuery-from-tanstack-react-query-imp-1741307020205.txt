import { NavBar } from "@/components/nav-bar";
import { useQuery } from "@tanstack/react-query";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Link } from "wouter";
import { Loader2, Calendar, DollarSign } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CreateProjectDialog } from "@/components/create-project-dialog";
import { useAuth } from "@/hooks/use-auth";
import { useEffect, useState } from "react";

interface Project {
  id: string;
  title: string;
  description: string;
  status: string;
  dueDate?: string;
  due_date?: string; // Added snake_case version
  budget?: number;
  fixedPrice?: string | boolean;
  fixed_price?: string; // Added snake_case version
  createdAt: string;
  created_at?: string; // Added snake_case version
  clientId: string;
  client_id?: string; // Added snake_case version
}

// Helper function to safely format dates
const formatDate = (dateString: string | undefined | null): string => {
  if (!dateString) return "Not set";
  try {
    return new Date(dateString).toLocaleDateString();
  } catch (e) {
    console.error("Error formatting date:", e);
    return "Invalid date";
  }
};

// Helper to get fixed price regardless of format
const getFixedPrice = (project: Project): string | undefined => {
  if (typeof project.fixedPrice === 'string') return project.fixedPrice;
  if (typeof project.fixed_price === 'string') return project.fixed_price;
  return undefined;
};

// Helper to get due date regardless of format
const getDueDate = (project: Project): string | undefined => {
  return project.dueDate || project.due_date;
};

export default function Projects() {
  const { user } = useAuth();
  const isAdmin = user?.role === 'admin';
  const [localProjects, setLocalProjects] = useState<Project[]>([]);

  // Use different endpoints based on user role
  const endpoint = isAdmin ? "/api/freshbooks/projects" : `/api/projects/user/${user?.id}`;

  const { data: projects, isLoading, error } = useQuery<Project[]>({
    queryKey: [endpoint],
    queryFn: async () => {
      const response = await fetch(endpoint, {
        credentials: 'include'
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Error: ${response.status}`);
      }
      
      const data = await response.json();
      console.log("Projects data from API:", data);
      
      // Transform the data to handle different formats
      return data.map((project: any) => ({
        ...project,
        // Ensure both camelCase and snake_case properties are available
        id: project.id?.toString(),
        title: project.title,
        description: project.description || '',
        status: project.status || (project.active ? 'Active' : 'Inactive'),
        dueDate: project.dueDate || project.due_date,
        due_date: project.due_date || project.dueDate,
        clientId: project.clientId || project.client_id,
        client_id: project.client_id || project.clientId,
        fixedPrice: project.fixedPrice || project.fixed_price,
        fixed_price: project.fixed_price || project.fixedPrice,
        createdAt: project.createdAt || project.created_at,
        created_at: project.created_at || project.createdAt
      }));
    },
    enabled: !!user // Only fetch when user is loaded
  });

  // Effect to load projects from cache if available
  useEffect(() => {
    if (projects) {
      setLocalProjects(projects);
      
      // Save to localStorage for persistence
      try {
        localStorage.setItem('projects_cache', JSON.stringify(projects));
      } catch (e) {
        console.error('Error saving projects to localStorage:', e);
      }
    } else {
      // Try to load from localStorage if API fetch hasn't completed
      try {
        const cachedProjects = localStorage.getItem('projects_cache');
        if (cachedProjects) {
          setLocalProjects(JSON.parse(cachedProjects));
        }
      } catch (e) {
        console.error('Error loading projects from localStorage:', e);
      }
    }
  }, [projects]);

  if (isLoading && !localProjects.length) {
    return (
      <div className="min-h-screen bg-background">
        <NavBar />
        <div className="flex items-center justify-center min-h-[calc(100vh-4rem)]">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      </div>
    );
  }

  if (error && !localProjects.length) {
    return (
      <div className="min-h-screen bg-background">
        <NavBar />
        <div className="container mx-auto px-4 py-8">
          <Alert variant="destructive">
            <AlertDescription>
              {error instanceof Error ? error.message : "Failed to load projects"}
            </AlertDescription>
          </Alert>
        </div>
      </div>
    );
  }

  const displayProjects = projects || localProjects;

  return (
    <div className="min-h-screen bg-background">
      <NavBar />
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">Projects</h1>
          {isAdmin && <CreateProjectDialog />}
        </div>

        {!displayProjects?.length ? (
          <Alert>
            <AlertDescription>
              {isAdmin 
                ? "No projects found. Create a new project using the button above."
                : "No projects assigned to you yet."}
            </AlertDescription>
          </Alert>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {displayProjects.map((project) => (
              <Card key={project.id} className="hover:shadow-md transition-shadow">
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle>{project.title}</CardTitle>
                      <CardDescription>
                        Created {formatDate(project.createdAt || project.created_at)}
                      </CardDescription>
                    </div>
                    <Badge variant={project.status === 'Active' ? 'default' : 'secondary'}>
                      {project.status}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground line-clamp-3 mb-4">
                    {project.description}
                  </p>
                  <div className="space-y-2 mb-4">
                    {getDueDate(project) && (
                      <div className="flex items-center text-sm text-muted-foreground">
                        <Calendar className="h-4 w-4 mr-2" />
                        Due: {formatDate(getDueDate(project))}
                      </div>
                    )}
                    {getFixedPrice(project) && (
                      <div className="flex items-center text-sm text-muted-foreground">
                        <DollarSign className="h-4 w-4 mr-2" />
                        Fixed Price: ${parseFloat(getFixedPrice(project) || '0').toLocaleString()}
                      </div>
                    )}
                    {project.budget && (
                      <div className="flex items-center text-sm text-muted-foreground">
                        <DollarSign className="h-4 w-4 mr-2" />
                        Budget: ${(project.budget / 100).toLocaleString()}
                      </div>
                    )}
                  </div>
                  <Button variant="outline" className="w-full" asChild>
                    <Link href={`/projects/${project.id}`}>View Details</Link>
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}