import type { Express, Request, Response, NextFunction } from "express";
import type { Session } from "express-session";
import { createServer, type Server } from "http";
import { setupAuth } from "./auth";
import { storage } from "./storage";
import { insertProjectSchema, insertInvoiceSchema, insertDocumentSchema, insertInquirySchema } from "@shared/schema";
import { freshbooksService } from "./services/freshbooks";
import { emailService } from "./services/email";
import { scrypt, randomBytes } from "crypto";
import { promisify } from "util";
import passport from "passport";
import type { User } from "@shared/schema";
import type { UploadedFile } from "express-fileupload";
import * as fs from "fs";
import * as path from "path";

// Type definitions 
interface AuthenticatedRequest extends Request {
  user?: Express.User & User;
  session: Session & { 
    freshbooksTokens?: {
      access_token: string;
      refresh_token: string;
    }
  };
}

interface FreshbooksClient {
  id: number | string;
  fname: string;
  lname: string;
  email: string;
  home_phone?: string;
  organization?: string;
  p_street?: string;
  p_street2?: string;
  p_city?: string;
  p_province?: string;
  p_code?: string;
  p_country?: string;
  vis_state: number;
  signup_date?: string;
  updated?: string;
  created_at?: string;
}

interface FreshbooksProject {
  id: number | string;
  title: string;
  description?: string;
  active: boolean;
  due_date?: string;
  budget?: number;
  fixed_price?: boolean;
  created_at?: string;
  client_id: number | string;
  billing_method?: string;
  project_type?: string;
  billed_amount?: number;
  billed_status?: string;
  completed?: boolean;
  complete?: boolean;
  progress?: number;
}

interface ProjectResponse {
  id: string;
  title: string;
  description: string;
  status: string; 
  createdAt: string;
  clientId: string;
  budget?: number;
  fixedPrice: string;
  billingMethod?: string;
  projectType?: string;
  billedAmount?: number;
  billedStatus?: string;
  progress?: number;
}

const scryptAsync = promisify(scrypt);

// Helper functions
function requireAdmin(req: AuthenticatedRequest, res: Response, next: NextFunction) {
  if (!req.isAuthenticated() || req.user?.role !== 'admin') {
    return res.status(403).send("Admin access required");
  }
  next();
}

function generateTemporaryPassword(): string {
  return randomBytes(8).toString('hex');
}

async function createInitialAdminUser() {
  try {
    const existingAdmin = await storage.getUserByUsername('admin@sdtechpros.com');
    if (!existingAdmin) {
      const hashedPassword = await storage.hashPassword('admin123');
      await storage.createUser({
        username: 'admin@sdtechpros.com',
        password: hashedPassword,
        email: 'admin@sdtechpros.com',
        role: 'admin',
        companyName: 'SD Tech Pros',
        isTemporaryPassword: false,
        freshbooksId: null
      });
      console.log('Initial admin user created successfully');
    }
  } catch (error) {
    console.error('Error creating initial admin user:', error);
    throw error;
  }
}

function validateId(id: string): number | null {
  const parsed = parseInt(id);
  return isNaN(parsed) ? null : parsed;
}

function getFreshbooksToken(req: AuthenticatedRequest): string | null {
  if (req.session.freshbooksTokens?.access_token) {
    return req.session.freshbooksTokens.access_token;
  }
  return process.env.FRESHBOOKS_ADMIN_TOKEN || null;
}

const formatDate = (dateString: string | null | undefined, timezone: string = 'America/Los_Angeles'): string => {
  try {
    if (!dateString) return 'Date not available';

    let date: Date;

    if (typeof dateString === 'string' && dateString.match(/^\d{4}-\d{2}-\d{2}/)) {
      date = new Date(dateString);
    } else if (!isNaN(Number(dateString))) {
      date = new Date(Number(dateString) * 1000);
    } else {
      return 'Invalid date';
    }

    if (isNaN(date.getTime())) {
      return 'Invalid date';
    }

    return date.toLocaleString('en-US', {
      timeZone: timezone,
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric', 
      hour12: true,
      timeZoneName: 'short'
    });
  } catch (error) {
    console.error('Error formatting date:', error);
    return 'Date formatting error';
  }
};

export async function registerRoutes(app: Express): Promise<Server> {
  try {
    console.log('Setting up authentication...');
    setupAuth(app);
    console.log('Creating initial admin user...');
    await createInitialAdminUser();

    // Authentication Routes
    app.post("/api/login", passport.authenticate("local"), async (req: AuthenticatedRequest, res: Response) => {
      try {
        if (!req.user?.id) {
          return res.status(401).json({ error: "Authentication required" });
        }

        const user = await storage.getUser(req.user.id);
        if (!user) {
          return res.status(404).json({ error: "User not found" });
        }
        
        res.json({
          ...user,
          requiresPasswordChange: user.isTemporaryPassword
        });
      } catch (error) {
        console.error("Error in login:", error);
        res.status(500).json({
          error: "Failed to process login",
          details: error instanceof Error ? error.message : String(error)
        });
      }
    });

    // User Routes
    app.get("/api/users", requireAdmin, async (_req: Request, res: Response) => {
      try {
        const users = await storage.getAllUsers();
        res.json(users);
      } catch (error) {
        console.error("Error fetching users:", error);
        res.status(500).json({ 
          error: "Failed to fetch users",
          details: error instanceof Error ? error.message : String(error)
        });
      }
    });

    app.patch("/api/users/:id/role", requireAdmin, async (req: Request, res: Response) => {
      try {
        const userId = validateId(req.params.id);
        if (userId === null) {
          return res.status(400).json({ error: "Invalid user ID" });
        }

        const { role } = req.body;
        if (!['pending', 'customer', 'admin'].includes(role)) {
          return res.status(400).json({ error: "Invalid role" });
        }

        const user = await storage.updateUserRole(userId, role);
        res.json(user);
      } catch (error) {
        console.error("Error updating user role:", error);
        res.status(400).json({ 
          error: "Failed to update user role",
          details: error instanceof Error ? error.message : String(error)
        });
      }
    });

    // Inquiry Routes
    app.post("/api/inquiries", async (req: Request, res: Response) => {
      try {
        const inquiryData = insertInquirySchema.parse(req.body);
        
        const existingUser = await storage.getUserByUsername(inquiryData.email);
        if (existingUser) {
          return res.status(400).json({ 
            error: "An account with this email already exists"
          });
        }

        const tempPassword = generateTemporaryPassword();
        const hashedPassword = await storage.hashPassword(tempPassword);

        await storage.createUser({
          username: inquiryData.email,
          password: hashedPassword,
          email: inquiryData.email,
          phoneNumber: inquiryData.phoneNumber,
          companyName: inquiryData.companyName,
          role: "pending",
          isTemporaryPassword: true
        });

        res.status(201).json({
          message: "Inquiry submitted successfully",
          tempPassword
        });
      } catch (error) {
        console.error("Error creating inquiry:", error);
        res.status(400).json({
          error: "Failed to create inquiry",
          details: error instanceof Error ? error.message : String(error)
        });
      }
    });

    // Project Routes 
    app.get("/api/freshbooks/clients/:clientId/projects/:projectId", async (req: AuthenticatedRequest, res: Response) => {
      try {
        if (!req.isAuthenticated()) {
          return res.status(401).json({ error: "Authentication required" });
        }

        const accessToken = getFreshbooksToken(req);
        if (!accessToken) {
          return res.status(401).json({ error: "Freshbooks authentication required" });
        }

        const project = await freshbooksService.getProject(accessToken, req.params.clientId, req.params.projectId);
        if (!project) {
          return res.status(404).json({ error: "Project not found" });
        }

        res.json(project);
      } catch (error) {
        console.error("Error fetching project:", error);
        res.status(500).json({
          error: "Failed to fetch project",
          details: error instanceof Error ? error.message : String(error)
        });
      }
    });

    // Create and return server
    console.log('Routes registered successfully');
    return createServer(app);
  } catch (error) {
    console.error("Error in registerRoutes:", error);
    throw error;
  }
}